name: CI

on:
  push:
    branches: [ main, develop, 'feature/**', 'fix/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      example: ${{ steps.changes.outputs.example }}
      docs: ${{ steps.changes.outputs.docs }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          src:
            - 'src/**'
            - 'package.json'
            - 'tsconfig.json'
            - 'babel.config.js'
          example:
            - 'example/**'
          docs:
            - 'docs/**'
            - 'README.md'
            - '*.md'
          workflows:
            - '.github/workflows/**'

  test-library:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.workflows == 'true'
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        include:
          - node-version: 20.x
            upload-coverage: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Build library
      run: yarn build
    
    - name: Run linting
      run: yarn lint
    
    - name: Run TypeScript check
      run: yarn tsc --noEmit
    
    - name: Run tests
      run: yarn test --coverage --watchAll=false --maxWorkers=2
    
    - name: Upload coverage
      if: matrix.upload-coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: library
        name: library-coverage

  test-example:
    runs-on: ubuntu-latest
    needs: [changes, test-library]
    if: needs.changes.outputs.example == 'true' || needs.changes.outputs.src == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'
    
    - name: Install root dependencies
      run: yarn install --frozen-lockfile
    
    - name: Build library
      run: yarn build
    
    - name: Install example dependencies
      working-directory: ./example
      run: yarn install --frozen-lockfile
    
    - name: Check example TypeScript
      working-directory: ./example
      run: yarn tsc --noEmit
    
    - name: Lint example
      working-directory: ./example
      run: yarn lint || echo "Example linting completed with warnings"

  build-platforms:
    runs-on: ${{ matrix.os }}
    needs: [changes, test-library]
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.example == 'true'
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: android
          - os: macos-latest
            platform: ios
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Build library
      run: yarn build
    
    - name: Install example dependencies
      working-directory: ./example
      run: yarn install --frozen-lockfile
    
    # iOS specific steps
    - name: Setup Ruby (iOS)
      if: matrix.platform == 'ios'
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        working-directory: ./example/ios
    
    - name: Install CocoaPods (iOS)
      if: matrix.platform == 'ios'
      working-directory: ./example/ios
      run: |
        bundle install
        bundle exec pod install
    
    - name: Build iOS
      if: matrix.platform == 'ios'
      working-directory: ./example
      run: |
        npx react-native bundle \
          --platform ios \
          --dev false \
          --entry-file index.js \
          --bundle-output ios/main.jsbundle \
          --assets-dest ios/
    
    # Android specific steps
    - name: Setup Java (Android)
      if: matrix.platform == 'android'
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      if: matrix.platform == 'android'
      uses: android-actions/setup-android@v3
    
    - name: Build Android
      if: matrix.platform == 'android'
      working-directory: ./example
      run: |
        npx react-native bundle \
          --platform android \
          --dev false \
          --entry-file index.js \
          --bundle-output android/app/src/main/assets/index.android.bundle \
          --assets-dest android/app/src/main/res/

  validate-docs:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs == 'true' || needs.changes.outputs.src == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Validate documentation
      run: |
        echo "## Documentation Validation 📚" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for required documentation files
        required_files=("README.md" "docs/API.md" "docs/INTEGRATION.md")
        all_present=true
        
        echo "| File | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "| $file | ✅ Present |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| $file | ❌ Missing |" >> $GITHUB_STEP_SUMMARY
            all_present=false
          fi
        done
        
        if [ "$all_present" = false ]; then
          echo "::error::Missing required documentation files"
          exit 1
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All required documentation files are present." >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.workflows == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Run security audit
      run: |
        echo "## Security Scan Results 🔒" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Run npm audit
        if npm audit --audit-level=moderate --json > audit-results.json 2>/dev/null; then
          echo "✅ No moderate or higher severity vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          VULN_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
          echo "⚠️ Found $VULN_COUNT vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run \`npm audit\` locally for detailed information." >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: audit-results.json
        retention-days: 30

  ci-summary:
    runs-on: ubuntu-latest
    needs: [test-library, test-example, build-platforms, validate-docs, security-scan]
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "## CI Pipeline Summary 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Library Tests | ${{ needs.test-library.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Example Tests | ${{ needs.test-example.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Platform Builds | ${{ needs.build-platforms.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.validate-docs.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Calculate success rate
        JOBS=("${{ needs.test-library.result }}" "${{ needs.test-example.result }}" "${{ needs.build-platforms.result }}" "${{ needs.validate-docs.result }}" "${{ needs.security-scan.result }}")
        SUCCESSFUL=0
        TOTAL=0
        
        for job in "${JOBS[@]}"; do
          if [ "$job" != "skipped" ]; then
            TOTAL=$((TOTAL + 1))
            if [ "$job" = "success" ]; then
              SUCCESSFUL=$((SUCCESSFUL + 1))
            fi
          fi
        done
        
        if [ $TOTAL -gt 0 ]; then
          SUCCESS_RATE=$((SUCCESSFUL * 100 / TOTAL))
          echo "### Success Rate: ${SUCCESS_RATE}% ($SUCCESSFUL/$TOTAL)" >> $GITHUB_STEP_SUMMARY
          
          if [ $SUCCESS_RATE -eq 100 ]; then
            echo "🎉 All CI checks passed!" >> $GITHUB_STEP_SUMMARY
          elif [ $SUCCESS_RATE -ge 80 ]; then
            echo "👍 Most CI checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Several CI checks failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
