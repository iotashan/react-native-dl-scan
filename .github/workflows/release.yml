name: Release & Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      deploy_to_stores:
        description: 'Deploy to app stores'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  XCODE_VERSION: '16.2'

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      new_tag: ${{ steps.version.outputs.new_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup
        uses: ./.github/actions/setup

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        id: version
        run: |
          # Bump version based on input
          NEW_VERSION=$(npm version ${{ github.event.inputs.release_type }} --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update CHANGELOG
          echo "## $NEW_VERSION ($(date +%Y-%m-%d))" > CHANGELOG.new.md
          echo "" >> CHANGELOG.new.md
          echo "### Changes" >> CHANGELOG.new.md
          echo "- Automated release" >> CHANGELOG.new.md
          echo "" >> CHANGELOG.new.md
          
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> CHANGELOG.new.md
            mv CHANGELOG.new.md CHANGELOG.md
          else
            mv CHANGELOG.new.md CHANGELOG.md
          fi

      - name: Commit and push
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git tag ${{ steps.version.outputs.new_tag }}
          git push origin main
          git push origin ${{ steps.version.outputs.new_tag }}

  create-release:
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always() && (github.event_name == 'push' || needs.version-bump.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build package
        run: yarn prepare

      - name: Extract release notes
        id: release_notes
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract the latest version's notes
            sed -n '/^## /,/^## /p' CHANGELOG.md | head -n -1 | tail -n +2 > release_notes.md
          else
            echo "Automated release" > release_notes.md
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Upload package to npm (dry run)
        run: |
          # This would publish to npm in a real scenario
          # npm publish --dry-run
          echo "Package would be published to npm registry"
          npm pack
          ls -la *.tgz

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: '*.tgz'
          retention-days: 90

  build-ios-release:
    runs-on: macos-latest
    needs: [create-release]
    if: github.event.inputs.deploy_to_stores == 'true' || github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Use appropriate Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Install CocoaPods
        run: |
          cd example
          bundle install
          bundle exec pod install --project-directory=ios

      # Note: Actual iOS signing would require:
      # - Certificates stored as secrets
      # - Provisioning profiles
      # - App Store Connect API key
      - name: Build iOS Release (unsigned)
        run: |
          cd example
          # This would build a signed release in a real scenario
          npx react-native build-ios --mode=Release
          echo "iOS release build completed (unsigned)"

      - name: Upload iOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-release-build
          path: |
            example/ios/build/
            example/ios/DerivedData/
          retention-days: 30

  build-android-release:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: github.event.inputs.deploy_to_stores == 'true' || github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      # Note: Actual Android signing would require:
      # - Keystore file stored as secret
      # - Keystore passwords
      # - Play Store service account key
      - name: Build Android Release (unsigned)
        run: |
          cd example/android
          # This would build a signed APK/AAB in a real scenario
          ./gradlew assembleRelease
          echo "Android release build completed (unsigned)"

      - name: Upload Android build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release-build
          path: |
            example/android/app/build/outputs/
          retention-days: 30

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [create-release, build-ios-release, build-android-release]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## Release & Deployment Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| iOS Build | ${{ needs.build-ios-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Android Build | ${{ needs.build-android-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Notes" >> $GITHUB_STEP_SUMMARY
          echo "- iOS and Android builds are unsigned (demo purposes)" >> $GITHUB_STEP_SUMMARY
          echo "- Actual store deployment requires signing certificates" >> $GITHUB_STEP_SUMMARY
          echo "- Package is prepared for npm publication" >> $GITHUB_STEP_SUMMARY